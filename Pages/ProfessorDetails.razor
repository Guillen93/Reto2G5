@page "/fetchProfessordetails"
@using Reto2G5.Enum;
@using Reto2G5.Helpers;
@using Reto2G5.Interfaces;
@using Reto2G5.Model;
@using System.Net.Http.Headers;
@using Reto2G5.componets;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net;
@using System.Text;
@using System.Net.Http;

@inject HttpClient Http
@inject NavigationManager NavManager


<h1>Pofessors Data</h1>
<p></p>
<div class="row">
    <div class="col-md-6">
        <a href='/professor/add' class="btn btn-success btn-sm" role="button">
            <i class="fas fa-user-plus"></i>
            Add Professor
        </a>
    </div>

    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search user by name"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />
@if (professorList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>photo</th>
                <th>ProfessorDni</th>
                <th>name</th>
                <th>surname</th>
                <th>email</th>
                <th>nationality</th>                
                <th>addres</th>
                
            </tr>
        </thead>
        <tbody>
            @foreach (var professor in professorList)
            {
                <tr>
                    <th><img src="data:image/jpeg;base64,@professor.photo" width="100" height="100"></th>
                    <th>@professor.professorDni</th>
                    <th>@professor.name</th>
                    <th>@professor.surname</th>
                    <th>@professor.email</th>
                    <th>@professor.nationality</th>
                    <th>@professor.addres</th>
                    
                    
                    <td><button type="button" class="btn btn-outline-danger btn-sm" @onclick="() => OpenDeleteDialog(professor)">Delete</button></td>
                    <td><button type="button" class="btn btn-warning btn-sm" @onclick="() => OpenDeleteDialog(professor)">Update</button></td>
                </tr>
            }
        </tbody>

    </table>
    @if (DeleteDialogOpen)
    {
        <ModalDialog Title="¿Estas Seguro?" Text="¿Quieres borrar el usuario?" DialogType="ModalDialog.ModalDialogType.DeleteCancel" OnClose="OnDeleteDialogClose"></ModalDialog>
    }
}
@code {
    [Inject]
    private ILocalStorage localStorage { get; set; }
    UserResponse userLocal = new UserResponse();
    protected List<ProfessorModel> professorList = new();
    protected List<ProfessorModel> searchUserData = new();

    private ProfessorModel _ProfessorModelToDelete;
    protected string SearchString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        userLocal = IsDataNull.CreateInstanceIFIsNull<UserResponse>(await localStorage.GetValue<UserResponse>(ValuesKeys.Objeto));
        await Getprofes();

    }


    protected async Task Getprofes()
    {
        HttpClient client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", userLocal.accessToken);
        professorList = await client.GetFromJsonAsync<List<ProfessorModel>>(Endpoints.GetProfessors());

        searchUserData = professorList;

    }


    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {

            professorList = searchUserData
                .Where(x => x.name.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            professorList = searchUserData;
        }
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        professorList = searchUserData;
    }


    public bool DeleteDialogOpen { get; set; }

    private async Task OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            string dni = _ProfessorModelToDelete.professorDni;
            HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", userLocal.accessToken);
            var response = await client.DeleteAsync(Endpoints.DeleteProfessor(dni));

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("ha borrado el profesor");
                
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", userLocal.accessToken);

                HttpResponseMessage responseDel = await client.DeleteAsync(Endpoints.DeleteUsers(dni));

                if (responseDel.IsSuccessStatusCode)
            {
                Console.WriteLine("ha borrado el usuario");
            }
                else
            {

                if (((int)responseDel.StatusCode) == 409)
                {
                   Console.WriteLine("usuario no existe");
                }
                else
                {
                    Console.WriteLine("Something went wrong");
                }
            }


            }else if (((int)response.StatusCode) == 401)
            {
                Console.WriteLine("Something went wrong");
                }
                else
                {
                Console.WriteLine("Something went wrong");
                }
            
            _ProfessorModelToDelete = null;

        }

        DeleteDialogOpen = false;
        StateHasChanged();
        NavManager.NavigateTo("/fetchProfessordetails", forceLoad: true);
    }

    private void OpenDeleteDialog(ProfessorModel professorModel)
    {
        DeleteDialogOpen = true;
        _ProfessorModelToDelete = professorModel;
        StateHasChanged();
    }


    //private void GoUpdate(UserModel userModel)
    //{
    //    string dni = userModel.dni;

    //    NavManager.NavigateTo("/user/update?dni=" + dni);
    //}

}