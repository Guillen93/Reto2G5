@page "/fetchuserdetails"
@using Reto2G5.Enum;
@using Reto2G5.Helpers;
@using Reto2G5.Interfaces;
@using Reto2G5.Model;
@using System.Net.Http.Headers;
@using Reto2G5.componets;
@inject HttpClient Http
@inject NavigationManager NavManager
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net;
@using System.Text;
@using System.Net.Http;

<h1>User Data</h1>
<p></p>
<div class="row">
    <div class="col-md-6">
        <a href='/user/add' class="btn btn-success btn-sm" role="button">
            <i class="fas fa-user-plus"></i>
            Add User
        </a>
    </div>
  
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search user by dni"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" />
        @if (SearchString.Length > 0)
        {
                <div class="input-group-append">
                    <button class="btn btn-danger" @onclick="ResetSearch">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
        }
    </div>
</div>
<br />
@if (userList == null)
{
        <p><em>Loading...</em></p>
}
else
{
        <table class="table table-striped align-middle table-bordered">
            <thead class="table-success">
                <tr>

                <th>dni</th>
                <th>enabled</th>
               
                </tr>
            </thead>
            <tbody>
            @foreach (var user in userList)
            {
                        <tr>
                            <td>@user.dni</td>
                            <td>@user.enabled</td>
                            <td>
                                <button type="button" class="btn btn-outline-danger" @onclick="() => OpenDeleteDialog(user)">Delete</button>

                                <button type="button" class="btn btn-warning btn-sm" @onclick="() =>GoUpdate(user)">Update</button>
                                
                            </td>    
                        </tr>
            }
            </tbody>

        </table>
        @if (DeleteDialogOpen)
            {
                <ModalDialog Title="¿Estas Seguro?" Text="¿Quieres borrar el usuario?" OnClose="OnDeleteDialogClose" DialogType="ModalDialog.ModalDialogType.DeleteCancel"></ModalDialog>
            }
}
@code {
    [Inject]
    private ILocalStorage localStorage { get; set; }
    UserResponse userLocal = new UserResponse();


    protected List<UserModel> userList = new();
    protected List<UserModel> searchUserData = new();



    private UserModel _userModelToDelete;
    protected string SearchString { get; set; } = string.Empty;
    public bool DeleteDialogOpen { get; set; }


    protected override async Task OnInitializedAsync()
    {
        userLocal = IsDataNull.CreateInstanceIFIsNull<UserResponse>(await localStorage.GetValue<UserResponse>(ValuesKeys.Objeto));
        await GetUser();

    }



    protected async Task GetUser()
    {

        HttpClient client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", userLocal.accessToken);

        HttpResponseMessage response = await client.GetAsync(Endpoints.GetUsers());
        if (response.IsSuccessStatusCode)
        {

            var apiString = await response.Content.ReadAsStringAsync();

            userList = JsonSerializer.Deserialize<List<UserModel>>(apiString);

            searchUserData = userList;
        }
    }



    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {

            userList = searchUserData
                .Where(x => x.dni.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            userList = searchUserData;
        }
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        userList = searchUserData;
    }




    private async Task OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            string dni = _userModelToDelete.dni;

            HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", userLocal.accessToken);

            HttpResponseMessage response = await client.DeleteAsync(Endpoints.DeleteUsers(dni));

            if (response.IsSuccessStatusCode)
            {
                foreach( RoleModel roleModel in _userModelToDelete.Roles)
                {
                    if (roleModel.roleID == 2)
                    {
                        HttpResponseMessage responseP = await client.DeleteAsync(Endpoints.DeleteProfessor(dni));

                    }else if(roleModel.roleID == 3)
                    {                 
                        HttpResponseMessage responseP = await client.DeleteAsync(Endpoints.DeleteProfessor(dni));
                    }
                }
                Console.WriteLine("ha borrado el usuario");
            }
            else
            {

                if (((int)response.StatusCode) == 409)
                {
                    Console.WriteLine("usuario no existe");
                }
                else
                {
                    Console.WriteLine("Something went wrong");
                }
            }
            _userModelToDelete = null;

        }          

        DeleteDialogOpen = false;
        StateHasChanged();
        NavManager.NavigateTo("/fetchuserdetails", forceLoad:true);
    }


    private void OpenDeleteDialog(UserModel userModel)
    {
        DeleteDialogOpen = true;
        _userModelToDelete = userModel;
        StateHasChanged();
    }

    private void GoUpdate(UserModel userModel)
    {
        string dni = userModel.dni;

        NavManager.NavigateTo("/user/update?dni=" + dni);
    }




   

}