@page "/fetchuserdetails"
@using Reto2G5.Enum;
@using Reto2G5.Helpers;
@using Reto2G5.Interfaces;
@using Reto2G5.Model;
@using System.Net.Http.Headers;
@using Reto2G5.componets;
@inject HttpClient Http
@inject NavigationManager NavManager
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net;
@using System.Text;
@using System.Net.Http;
@using System.Net.Http.Headers;


<h1>User Data</h1>
<p></p>
<div class="row">
    <div class="col-md-6">
        <a href='/user/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add User
        </a>
    </div>
  
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search user by dni"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" />
        @if (SearchString.Length > 0)
        {
                <div class="input-group-append">
                    <button class="btn btn-danger" @onclick="ResetSearch">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
        }
    </div>
</div>
<br />
@if (userList == null)
{
        <p><em>Loading...</em></p>
}
else
{
        <table class="table table-striped align-middle table-bordered">
            <thead class="table-success">
                <tr>

                <th>dni</th>
                <th>enabled</th>
               
                </tr>
            </thead>
            <tbody>
            @foreach (var user in userList)
            {
                        <tr>
                            <td>@user.dni</td>
                            <td>@user.Enabled</td>
                            <td><button type="button" class="btn btn-outline-danger btn-sm" @onclick="() => OpenDeleteDialog(user)">Delete</button></td>
                        </tr>
            }
            </tbody>

        </table>
        @if (DeleteDialogOpen)
            {
                <ModalDialog Title="¿Estas Seguro?" Text="¿Quieres borrar el usuario?" OnClose="OnDeleteDialogClose"></ModalDialog>
            }
}
@code {
    [Inject]
    private ILocalStorage localStorage { get; set; }
    UserResponse userLocal = new UserResponse();
    protected List<UserModel> userList = new();
    protected List<UserModel> searchUserData = new();

    //protected UserModel user = new();
    private UserModel _userModelToDelete;
    protected string SearchString { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        userLocal = IsDataNull.CreateInstanceIFIsNull<UserResponse>(await localStorage.GetValue<UserResponse>(ValuesKeys.Objeto));
        await GetUser3();

    }


    protected async Task GetUser()
    {

        userList = await Http.GetFromJsonAsync<List<UserModel>>(Endpoints.GetUsers());
       
        searchUserData = userList;

    }


    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
           
            userList = searchUserData
                .Where(x => x.dni.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            userList = searchUserData;
        }
    }

    public void ResetSearch()
    {
        SearchString = string.Empty;
        userList = searchUserData;
    }


    public bool DeleteDialogOpen { get; set; } 

    private async Task OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            string dni = _userModelToDelete.dni;
            var response = await Http.DeleteAsync(Endpoints.DeleteUsers(dni));

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("ha entrado 200");
                
                
            }
            else
            {

                if (((int)response.StatusCode) == 401)
                {
                    //errorMessage = "Incorrect user or password";
                }
                else
                {
                    //errorMessage = "Something went wrong";
                }
            }
            _userModelToDelete = null;
            
            
        }
           
          
         
            
        
        DeleteDialogOpen = false;
        StateHasChanged();
        NavManager.NavigateTo("/fetchuserdetails", forceLoad:true);
    }
    private void OpenDeleteDialog(UserModel userModel)
    {
        DeleteDialogOpen = true;
        _userModelToDelete = userModel;
        StateHasChanged();
    }

    //protected async Task GetUser2()
    //{
    //    var request = new HttpRequestMessage(HttpMethod.Get, Endpoints.GetUsers());
    //    // request.SetBrowserRequestMode(BrowserRequestMode.Cors);
    //    request.Headers.Add("Authorization", "Bearer " + Index.funciones.token);
    //    request.Headers.Add("Access-Control-Allow-Headers", "http://localhost:8082");
    //    request.Headers.Add("Access-Control-Allow-Origin", "http://localhost:8082");
    //    // request.SetBrowserRequestMode(BrowserRequestMode.NoCors);
    //    // request.SetBrowserRequestCache(BrowserRequestCache.NoStore);

    //    var response = await Http.SendAsync(request);

    //    if (response.IsSuccessStatusCode)
    //    {
    //        var apistring = await response.Content.ReadAsStringAsync();
    //        Console.Write(apistring);
    //        userList = JsonSerializer.Deserialize<List<UserModel>>(apistring);
    //    }
    //    else
    //    {
    //        Console.Write(response.StatusCode);
    //    }
    //    searchUserData = userList;
    //}



    protected async Task GetUser3()
    {

      

        
        HttpClient client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", userLocal.accessToken);

        HttpResponseMessage response = await client.GetAsync(Endpoints.GetUsers());
        if (response.IsSuccessStatusCode)
        {

            var apiString = await response.Content.ReadAsStringAsync();

            userList = JsonSerializer.Deserialize<List<UserModel>>(apiString);

            searchUserData = userList;
        }
    }

}