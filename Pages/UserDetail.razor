@page "/fetchuserdetails"
@using Reto2G5.Model;
@using System.Net.Http.Headers;

@inject HttpClient Http
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net;
@using System.Text;
@using System.Net.Http;
@using System.Net.Http.Headers;


<h1>User Data</h1>
<p></p>
<div class="row">
    <div class="col-md-6">
        <a href='/user/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add User
        </a>
    </div>
    @*<div class="row align-items-end">
        <div class="col"></div>
        <div class="col">
            <button class="btn btn-danger" style="width:150px" @onclick=GetUser2>buscar usuarios</button>
        </div>
        <div class="col"></div>
    </div>*@
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search user by dni"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" />
        @if (SearchString.Length > 0)
        {
                <div class="input-group-append">
                    <button class="btn btn-danger" @onclick="ResetSearch">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
        }
    </div>
</div>
<br />
@if (userList == null)
{
        <p><em>Loading...</em></p>
}
else
{
        <table class="table table-striped align-middle table-bordered">
            <thead class="table-success">
                <tr>
                  @*  <th>ID</th>
                    <th>Name</th>
                    <th>Address</th>
                    <th>Department</th>
                    <th>Cell No</th>
                    <th>E-mail</th>*@
                <th>dni</th>
                <th>enabled</th>
               
                </tr>
            </thead>
            <tbody>
            @foreach (var user in userList)
            {
                        <tr>
                            <td>@user.dni</td>
                            <td>@user.isEnabled</td>
                           <td></td>
                    @* <td>@user.Userid</td>
                            <td>@user.Username</td>
                            <td>@user.Address</td>
                            <td>@user.Cellnumber</td>
                            <td>@user.Emailid</td>*@
                            <td>
                                <a href='/user/edit/' class="btn btn-outline-dark" role="button">
                                    Edit
                                </a>
                                <a href='/user/delete/' class="btn btn-outline-danger" role="button">
                                    Delete
                                </a>
                            </td>
                        </tr>
            }
            </tbody>

        </table>
}
@code {

    protected List<UserModel> userList = new();
    protected List<UserModel> searchUserData = new();
    protected UserModel user = new();
    protected string SearchString { get; set; } = string.Empty;
    string? bearerToken = "Bearer " + Index.funciones.token;
    protected override async Task OnInitializedAsync()
    {
        await GetUser();
    }

    
    protected async Task GetUser()
    {

        //Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Index.funciones.token);

        //Http.DefaultRequestHeaders.Add("Authorization", $"Bearer " + Index.funciones.token);
        userList = await Http.GetFromJsonAsync<List<UserModel>>(Endpoints.GetUsers());

        searchUserData = userList;
    }
    protected async Task GetUser2()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,Endpoints.GetUsers());
        request.Headers.Add("Authorization", "Bearer " + Index.funciones.token);
        request.Headers.Add("Access-Control-Allow-Headers", "*");
        request.SetBrowserRequestMode(BrowserRequestMode.NoCors);
        request.SetBrowserRequestCache(BrowserRequestCache.NoStore);
        
        var response = await Http.SendAsync(request);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var apistring = await response.Content.ReadAsStringAsync();

            userList = JsonSerializer.Deserialize<List<UserModel>>(apistring);
        }
        searchUserData = userList;
    }

    //protected async Task GetUser()
    //{
    //    var request = new HttpRequestMessage(HttpMethod.Get, Endpoints.GetUsers());
    //    request.Headers.Authorization = new AuthenticationHeaderValue("Bearer ", token);        
    //    HttpResponseMessage response = await Http.SendAsync(request, HttpCompletionOption.ResponseHeadersRead);
    //    if (response.StatusCode == System.Net.HttpStatusCode.OK)
    //    {
    //        var apiString = await response.Content.ReadAsStringAsync();
    //        //users = JsonConvert.DeserializeObject<List<Player>>(apiString);
    //        userList = JsonSerializer.Deserialize<List<UserModel>>(apiString);
    //    }
    //    searchUserData = userList;
    //}

    protected async Task GetUser3()
    {

        //Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Index.funciones.token);


        HttpClient client = new HttpClient();
     

        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", Index.funciones.token);

        HttpResponseMessage response = await client.GetAsync(Endpoints.GetUsers());
        if (response.IsSuccessStatusCode)
        {
          
            var apiString = await response.Content.ReadAsStringAsync();
                    
            userList = JsonSerializer.Deserialize<List<UserModel>>(apiString);

            searchUserData = userList;
        }
    }

    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            userList = searchUserData
                .Where(x => x.dni.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            userList = searchUserData;
        }
    }
    protected void DeleteConfirm(String userDni)
    {
        user = userList.FirstOrDefault(x => x.dni == userDni);
    }
    public void ResetSearch()
    {
        SearchString = string.Empty;
        userList = searchUserData;
    }
}