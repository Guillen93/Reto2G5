@page "/user/update"


@using System.ComponentModel.DataAnnotations
@using Reto2G5.Enum;
@using Reto2G5.Helpers;
@using Reto2G5.Interfaces;
@using Reto2G5.Model;
@using Reto2G5.componets;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net;
@using System.Text;

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@using System.Net.Http.Headers;


<div >
   

<div class="container">
    <div class="row align-items-start">
        <div class="col"> </div>
       
        <div class="col"> </div>
    </div>
    <div class="row align-items-center">
        <div class="col"></div>
        <div class="col">
            <h3>modificar Usuario</h3>
                <EditForm Model=userRequest >
                    <DataAnnotationsValidator />
                   
                    <div>
                        <p>
                            <label for="nombre">User_Dni:</label>
                            <InputText @bind-Value=userRequest.dni id="nombre" class="form-control" size=40 style="width:500px " />
                            <ValidationMessage For=@(()=>userRequest.dni) />
                        </p>
                    </div>

                    <div>
                        <p>
                            <label for="password">PassWord:</label>
                            <InputText @bind-Value=userRequest.password id="password" type="password" class="form-control" size=40 style="width:500px" />
                            <ValidationMessage For=@(()=>userRequest.password) />
                        </p>
                    </div>
                     <div>
                        <p>
                            <label for="roles">Role:</label>
                            <InputSelect class="form-select" @bind-Value="userRequest.roleId" >
                                <option value="0" selected>Elige un Rol</option>
                                @foreach(var rol in roleList)
                                {
                                    <option value="@rol.roleID">@rol.role</option>
                                }

                            </InputSelect>
                        </p>

                    </div>

                    <div class="row align-items-end">
                        <div class="col"></div>
                        <div class="col">
                            <button class="btn btn-danger" style="width:150px" @onclick="createUser">Ir</button>
                        </div>
                        <div class="col"></div>
                    </div>
                </EditForm>
            </div>
        <div class="col"> </div>
            <p>@errorMessage</p>
          
    </div>
    
</div>

</div>


@code {
    [Inject]
    private ILocalStorage localStorage { get; set; }
    UserResponse userLocal = new UserResponse();

    public bool DeleteDialogOpen { get; set; }

    UserRequest userRequest = new UserRequest();
    protected List<RoleModel> roleList = new();
    String errorMessage;

    protected override async Task OnInitializedAsync()
    {
        userLocal = IsDataNull.CreateInstanceIFIsNull<UserResponse>(await localStorage.GetValue<UserResponse>(ValuesKeys.Objeto));
        await GetRoles();
    }


    protected async Task GetRoles()
    {
        HttpClient client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", userLocal.accessToken);

        HttpResponseMessage response = await client.GetAsync(Endpoints.GetRoles());
        if (response.IsSuccessStatusCode)
        {

            var apiString = await response.Content.ReadAsStringAsync();

            roleList = JsonSerializer.Deserialize<List<RoleModel>>(apiString);
            Console.WriteLine("prueba rolelist");

        }else
        {
            if (((int)response.StatusCode) == 401)
            {
                errorMessage = "no puede hacer eso";
            }
            else
            {
                errorMessage = "Something went wrong";
            }
        }

        
    }

    async Task createUser()
    {
                               
        HttpResponseMessage response = await Http.PostAsJsonAsync<UserRequest>(Endpoints.CreateUsers(), userRequest);

        if (response.IsSuccessStatusCode)
        {


            NavManager.NavigateTo("/fetchuserdetails");


        }
        else
        {
            if (((int)response.StatusCode) == 401)
            {
                errorMessage = "no puede hacer eso";
            }
            if (((int)response.StatusCode) == 409)
            {
                errorMessage = "usuario ya registrado";
            }
            else
            {
                errorMessage = "Something went wrong";
            }
        }
         
    }
       
}