@page "/user/update"


@using System.ComponentModel.DataAnnotations
@using Reto2G5.Enum;
@using Reto2G5.Helpers;
@using Reto2G5.Interfaces;
@using Reto2G5.Model;
@using Reto2G5.componets;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net;
@using System.Text;

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

@using System.Net.Http.Headers;
@using System.Web;


<div >
   

<div class="container">
    <div class="row align-items-start">
        <div class="col"> </div>
       
        <div class="col"> </div>
    </div>
    <div class="row align-items-center">
        <div class="col"></div>
        <div class="col">
            <h3>modificar Usuario</h3>
                
                <EditForm Model=userUpdate >
                    <DataAnnotationsValidator />
                   
                    <div>
                        <p>
                            <label for="nombre">User:</label>
                            <InputText @bind-Value=userUpdate.dni id="nombre" disabled class="form-control" size=40 style="width:500px " />
                            <ValidationMessage For=@(()=>userUpdate.dni) />
                        </p>
                    </div>
                   
                    <div>
                        <p>
                            <label for="check">Validar user:</label>
                            <InputCheckbox id="check" class="form-check" />                          
                        </p>
                    </div>
                     

                    <div class="row align-items-end">
                       
                        
                            <button class="btn btn-success" style="width:150px" >Update</button>
                            <a href='/fetchuserdetails' class="btn btn-outline-info" role="button">VOLVER</a>
                        
                    </div>
                </EditForm>
            </div>
        <div class="col"> </div>
            <p>@errorMessage</p>
          
    </div>
    
</div>

</div>


@code {
    [Inject]
    private ILocalStorage localStorage { get; set; }
    UserResponse userLocal = new UserResponse();
    protected List<RoleModel> roleList = new();

    public bool DeleteDialogOpen { get; set; }
    private string dniUrl;
    [Inject]
    public NavigationManager MyNavigationManager {get; set;} = default!;
    UserUpdate userUpdate ;

    String errorMessage;

    protected override async Task OnInitializedAsync()
    {
        userLocal = IsDataNull.CreateInstanceIFIsNull<UserResponse>(await localStorage.GetValue<UserResponse>(ValuesKeys.Objeto));
        await GetRoles();
        Uri url = new Uri(MyNavigationManager.Uri);
        dniUrl = HttpUtility.ParseQueryString(url.Query).Get("dni");
        await GetUserDni(dniUrl);

    }
    protected async Task GetRoles()
    {
        HttpClient client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", userLocal.accessToken);

        HttpResponseMessage response = await client.GetAsync(Endpoints.GetRoles());
        if (response.IsSuccessStatusCode)
        {

            var apiString = await response.Content.ReadAsStringAsync();

            roleList = JsonSerializer.Deserialize<List<RoleModel>>(apiString);
            Console.WriteLine("prueba rolelist");

        }else
        {
            if (((int)response.StatusCode) == 401)
            {
                errorMessage = "no puede hacer eso";
            }
            else
            {
                errorMessage = "Something went wrong";
            }
        }

        
    }
    protected async Task GetUserDni(string dniUrl)
    {

        HttpClient client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", userLocal.accessToken);

        HttpResponseMessage response = await client.GetAsync(Endpoints.GetUsersByDni(dniUrl));
        if (response.IsSuccessStatusCode)
        {

            var apiString = await response.Content.ReadAsStringAsync();

            userUpdate = JsonSerializer.Deserialize<UserUpdate>(apiString);
        }
    }
    //async Task UpdatedUser()
    //{
                               
    //    HttpResponseMessage response = await Http.PostAsJsonAsync<UserRequest>(Endpoints.UpdateUser(userRequest.dni), userRequest);

    //    if (response.IsSuccessStatusCode)
    //    {


    //        NavManager.NavigateTo("/fetchuserdetails");


    //    }
    //    //else
    //    //{
    //    //    if (((int)response.StatusCode) == 401)
    //    //    {
    //    //        errorMessage = "no puede hacer eso";
    //    //    }
    //    //    if (((int)response.StatusCode) == 409)
    //    //    {
    //    //        errorMessage = "usuario ya registrado";
    //    //    }
    //        else
    //        {
    //            errorMessage = "Something went wrong";
    //        }
    //    //}
         
    //}
    
}