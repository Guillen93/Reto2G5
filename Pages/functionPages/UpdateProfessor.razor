@page "/professor/update"


@using System.ComponentModel.DataAnnotations
@using Reto2G5.Enum;
@using Reto2G5.Helpers;
@using Reto2G5.Interfaces;
@using Reto2G5.Model;
@using Reto2G5.componets;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Net;
@using System.Text;

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager

@using System.Net.Http.Headers;
@using System.Web;

<div>
    <div class="container">
        <div class="row align-items-start">
            <div class="col"> </div>

            <div class="col"> </div>
        </div>
        <div class="row align-items-center">
            <div class="col"></div>
            <div class="col">
                <h3>Modificar Estudiante</h3>
                <EditForm Model=professorUpdate>

                    <div>
                        <img src="data:image/jpeg;base64,@professorUpdate.photo" width="200" height="200">
                    </div>
                    <div>
                        <p>
                            <label for="id">Student_Dni:</label>
                            <InputText @bind-Value=professorUpdate.professorDni id="id" disabled class="form-control" size=40 style="width:500px " />

                        </p>
                    </div>
                    <div>
                        <p>
                            <label for="nombre">Nombre:</label>
                            <InputText @bind-Value=professorUpdate.name id="nombre" disabled class="form-control" size=40 style="width:500px " />

                        </p>
                    </div>
                    <div>
                        <p>
                            <label for="apellido">Apellido:</label>
                            <InputText @bind-Value=professorUpdate.surname id="apellido" disabled class="form-control" size=40 style="width:500px " />
                            <ValidationMessage For=@(()=>professorUpdate.surname) />
                        </p>
                    </div>
                    <div>
                        <p>
                            <label for="email">Email:</label>
                            <InputText @bind-Value=professorUpdate.email id="email" class="form-control" size=40 style="width:500px " />
                            <ValidationMessage For=@(()=>professorUpdate.email) />
                        </p>
                    </div>
                    <div>
                        <p>
                            <label for="nationaility">Nacionalidad:</label>
                            <InputText @bind-Value=professorUpdate.nationality id="nacionalidad" disabled class="form-control" size=40 style="width:500px " />
                            <ValidationMessage For=@(()=>professorUpdate.nationality) />
                        </p>
                    </div>
                    <div>
                        <p>
                            <label for="adress">Dirección:</label>
                            <InputText @bind-Value=professorUpdate.addres id="adress" class="form-control" size=40 style="width:500px " />
                        </p>
                    </div>

                    <div class="row align-items-end">
                        <div class="col"></div>
                        <div class="col">
                            <button class="btn btn-danger" style="width:150px" @onclick="UpdatedProfessor">Update Profesor:</button>
                        </div>
                        <div class="col"></div>
                    </div>
                </EditForm>
            </div>
            <div class="col"> </div>
            @if (OpenErrorDialog)
            {
                <ModalDialog Title=" ¡Error! " Text="ha habido un error" OnClose="OnErrorDialogClose" DialogType="ModalDialog.ModalDialogType.Ok"></ModalDialog>
            }
        </div>
    </div>

</div>


@code {
    [Inject]
    private ILocalStorage localStorage { get; set; }
    UserResponse userLocal = new UserResponse();

    [Inject]
    public NavigationManager MyNavigationManager { get; set; } = default!;
    private string dniUrl;



    public bool OpenErrorDialog { get; set; }
    ProfessorRequest professorUpdate;


    protected override async Task OnInitializedAsync()
    {
        userLocal = IsDataNull.CreateInstanceIFIsNull<UserResponse>(await localStorage.GetValue<UserResponse>(ValuesKeys.Objeto));
        Uri url = new Uri(MyNavigationManager.Uri);
        dniUrl = HttpUtility.ParseQueryString(url.Query).Get("dni");
        await GetProfessorDni(dniUrl);

    }

    protected async Task GetProfessorDni(string dniUrl)
    {
        HttpClient client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", userLocal.accessToken);

        HttpResponseMessage response = await client.GetAsync(Endpoints.GetProfessorsByDni(dniUrl));
        if (response.IsSuccessStatusCode)
        {
            var apiString = await response.Content.ReadAsStringAsync();
            professorUpdate = JsonSerializer.Deserialize<ProfessorRequest>(apiString);
        }

    }

    async Task UpdatedProfessor()
    {

        HttpClient client = new HttpClient();
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", userLocal.accessToken);

            HttpResponseMessage response = await client.PutAsJsonAsync<ProfessorRequest>(Endpoints.UpdateProfessor(professorUpdate.professorDni), professorUpdate);



        if (response.IsSuccessStatusCode)
        {

            eMailModel mail = new eMailModel();
                mail.recipient = professorUpdate.email;
            mail.subject = "modificacion de Profesores";
                mail.msgBody = "Datos Actualizados " + professorUpdate.name + "\n Sus datos se han modificado correctamente.";

            string sendMail = "http://localhost:8082/api/sendMail";
            HttpClient HttpClP = new HttpClient();
            var responseMP = await HttpClP.PostAsJsonAsync<eMailModel>(sendMail, mail);


            if (responseMP.IsSuccessStatusCode)
            {
                Console.WriteLine("Email enviado");
                NavManager.NavigateTo("/fetchProfessordetails");
            }
            else
            {
                Console.WriteLine("Something went wrong");
            }


        }
        else if (((int)response.StatusCode) == 204)
        {
            Console.WriteLine("el usuario no puede actualizarse");
            NavManager.NavigateTo("/professor/update");

        }
        else if (((int)response.StatusCode) == 401)
        {

            Console.WriteLine("no puede hacer eso");
        }
        else
        {
            Console.WriteLine("Something went wrong");
        }

    }

    private async Task OnErrorDialogClose()
    {
        OpenErrorDialog = false;
        StateHasChanged();
        NavManager.NavigateTo("/professor/update", forceLoad: true);
    }

    private void DialogOpenError()
    {
        OpenErrorDialog = true;
        StateHasChanged();
    }
}