@using Reto2G5.Model

<nav>
    <ul class="pagination justify-content-center">
        @foreach (var item in _paginationButtons)
        {
            <li @onclick="() => OnSelectedPage(item)"
            style="cursor:pointer"
            class="page-item
                @(item.Enabled ? null : "disabled")
                @(item.Active ? "active" : null) ">
                <span class="page-link" href="#">@item.Text</span>
            </li>
        }
    </ul>
</nav>

@code {
    private List<PaginationButton> _paginationButtons;

    [Parameter]
    public PaginationMetaData MetaData { get; set; }  //lo recibiré del PADRE PokedexPage.
    [Parameter]
    public EventCallback<int> SelectedPage { get; set; }
    //Cuando el usuario haga click en @item.Text,
    //quiero avisar al padre que la paginación ha sido clickeada,
    //para que el padre pueda renderizar el nuevo contenido.
    [Parameter]
    public int Spread { get; set; }
    //cantidad de botones que el foreach va a mostrar.
    //Por ej: los primeros 4 y los últimos 4, algunos puntitos


    protected override void OnParametersSet()
    {//lo primero que se ejecuta en un componente Blazor.
        CreatePaginationButtons();
    }

    private void CreatePaginationButtons()
    {
        _paginationButtons = new List<PaginationButton>(); // nueva lista de botones
        _paginationButtons.Add(new PaginationButton(MetaData.CurrentPage - 1, MetaData.HasPrevious, "Previous"));
        //agrego el botón PREVIOUS a la lista con la firma(int pagina, enabled, text)
        for (int i = 1; i <= MetaData.TotalPages; i++)
        {
            //controlo el limite de botonos a mostrar
            if (i >= MetaData.CurrentPage - Spread && i <= MetaData.CurrentPage + Spread)
                _paginationButtons.Add(new PaginationButton(i, true, i.ToString()) 
                { 
                    Active = MetaData.CurrentPage == i 
                });
        }
        //agrego el botón NEXT
        _paginationButtons.Add(new PaginationButton(MetaData.CurrentPage + 1, MetaData.HasNext, "Next"));
    }

    private async Task OnSelectedPage(PaginationButton button)
    {
        //para no hacer nada si están constantemente pulsando sobre la misma página.
        if (button.Page == MetaData.CurrentPage || !button.Enabled)
            return;

        MetaData.CurrentPage = button.Page; //la guardamos como pagina activa
        await SelectedPage.InvokeAsync(button.Page);
        //Invocamos al metodo  private async Task SelectedPage(int page)
        //que está en PokedexPage
    }
}
